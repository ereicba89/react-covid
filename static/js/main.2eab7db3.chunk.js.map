{"version":3,"sources":["components/Cards/Cards.module.scss","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountrySelect/CountrySelect.jsx","App.js","index.js","App.module.scss","components/Charts/Charts.module.scss","components/CountrySelect/CountrySelect.module.scss","assets/image-front.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","color","gutterBottom","start","end","value","duration","separator","Date","toLocaleDateString","textRecovered","url","fetchData","country","a","altUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","series","options","legend","show","colors","chart","toolbar","id","xaxis","labels","trim","categories","moment","format","type","width","barChart","datasets","label","backgroundColor","display","title","text","CountrySelect","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","rawData","this","image","src","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eab7db3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1t5KM\",\"card\":\"Cards_card__1mPNX\",\"textRecovered\":\"Cards_textRecovered__TcOPW\",\"infected\":\"Cards_infected__1uYYx\",\"recovered\":\"Cards_recovered__2AONk\",\"deaths\":\"Cards_deaths__1RPyL\"};","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport CountUp from 'react-countup'\nimport styles from './Cards.module.scss'\nimport cx from 'classnames'\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify='center'>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography variant='h5' color='textSecondary' gutterBottom>\n              Infectados\n            </Typography>\n            <Typography variant='h5' color='primary'>\n              <CountUp\n                start={0}\n                end={confirmed ? confirmed.value : 0}\n                duration={2.5}\n                separator=','></CountUp>\n            </Typography>\n            <br></br>\n            <Typography color='textSecondary' gutterBottom>\n              {new Date(lastUpdate).toLocaleDateString('ES-es')}\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography variant='h5' color='textSecondary' gutterBottom>\n              Recuperados\n            </Typography>\n            <Typography variant='h5' className={styles.textRecovered}>\n              <CountUp\n                start={0}\n                end={recovered ? recovered.value : 0}\n                duration={2.5}\n                separator=','></CountUp>\n            </Typography>\n            <br></br>\n            <Typography color='textSecondary' gutterBottom>\n              {new Date(lastUpdate).toLocaleDateString('ES-es')}\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography variant='h5' color='textSecondary' gutterBottom>\n              Muertes\n            </Typography>\n            <Typography variant='h5' color='error'>\n              <CountUp\n                start={0}\n                end={deaths ? deaths.value : 0}\n                duration={2.5}\n                separator=','></CountUp>\n            </Typography>\n            <br></br>\n            <Typography color='textSecondary' gutterBottom>\n              {new Date(lastUpdate).toLocaleDateString('ES-es')}\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards\n","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async (country) => {\n    let altUrl = url;\n\n    if (country) {\n        altUrl = `${url}/countries/${country}`;\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(altUrl)\n\n        return { confirmed, recovered, deaths, lastUpdate }\n    } catch (error) {\n        throw error\n    }\n}\n\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n        const modifiedData = data.map(dailyData => ({\n            confirmed: dailyData.confirmed.total,\n            recovered: dailyData.recovered.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n        return modifiedData\n    } catch (error) {\n        throw error\n    }\n}\n\n// export const fetchCountry = async (country) => {\n//     try {\n//         const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(`${url}/countries/${country}`)\n//         return { confirmed, recovered, deaths, lastUpdate }\n//     } catch (error) {\n//         throw error\n//     }\n// }\n\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`)\n        return countries.map((country) => country.name)\n    } catch (error) {\n        throw error\n    }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\nimport Chart from 'react-apexcharts'\nimport moment from 'moment'\n\nimport styles from './Charts.module.scss'\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([])\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      setDailyData(await fetchDailyData())\n    }\n\n    fetchApi()\n  }, [])\n\n  const lineChart = dailyData.length ? (\n    <Chart\n      series={[\n        {\n          name: 'Infectados',\n          data: dailyData.map(({ confirmed }) => confirmed),\n        },\n        {\n          name: 'Muertes',\n          data: dailyData.map(({ deaths }) => deaths),\n        },\n      ]}\n      options={{\n        legend: {\n          show: true,\n        },\n        colors: ['#3333ff', 'red'],\n        chart: {\n          toolbar: {\n            show: true,\n          },\n          id: 'area',\n        },\n        xaxis: {\n          labels: {\n            trim: false,\n          },\n          categories: dailyData.map(({ date }) =>\n            moment(date).format('MMMM Do YYYY')\n          ),\n        },\n      }}\n      type='area'\n      width='800px'\n    />\n  ) : null\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: ['Infectados', 'Recuperados', 'Muertes'],\n        datasets: [\n          {\n            label: 'Personas',\n            backgroundColor: [\n              'rgba(0 ,0, 255, 0.5)',\n              'rgba(0 ,255, 0, 0.5)',\n              'rgba(255 ,0, 0, 0.5)',\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Estado actual en ${country}` },\n      }}></Bar>\n  ) : null\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  )\n}\n\nexport default Charts\n","import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\nimport styles from './CountrySelect.module.scss'\n\nimport { fetchCountries } from '../../api'\n\nconst CountrySelect = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([])\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      setFetchedCountries(await fetchCountries())\n    }\n    fetchApi()\n  }, [setFetchedCountries])\n\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=''\n        onChange={(e) => {\n          handleCountryChange(e.target.value)\n        }}>\n        <option value=''>Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountrySelect\n","import React from 'react';\n\nimport { Cards, Charts, CountrySelect } from './components'\nimport styles from './App.module.scss'\nimport image from './assets/image-front.png'\n\nimport { fetchData } from './api'\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const rawData = await fetchData()\n    this.setState({ data: rawData })\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    this.setState({ data: fetchedData, country: country })\n\n  }\n\n  render() {\n    const { data, country } = this.state\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={image} alt=\"covid-19\"></img>\n        <Cards data={data}>\n\n        </Cards>\n        <CountrySelect handleCountryChange={this.handleCountryChange}>\n\n        </CountrySelect>\n        <Charts data={data} country={country}>\n\n        </Charts>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"image\":\"App_image__idSIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2OYAK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromControl\":\"CountrySelect_fromControl__3Kyya\"};","module.exports = __webpack_public_path__ + \"static/media/image-front.1270cc4d.png\";"],"sourceRoot":""}